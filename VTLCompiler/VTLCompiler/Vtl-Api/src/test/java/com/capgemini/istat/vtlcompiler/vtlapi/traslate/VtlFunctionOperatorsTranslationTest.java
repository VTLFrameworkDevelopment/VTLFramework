package com.capgemini.istat.vtlcompiler.vtlapi.traslate;

import com.capgemini.istat.vtlcompiler.vtlapi.utils.TranslationUtilsTestService;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.dataset.VtlComponent;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.dataset.VtlComponentRole;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.dataset.VtlDataset;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.dataset.VtlType;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.define.UserFunction;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.define.VtlUserFunctionType;
import com.capgemini.istat.vtlcompiler.vtlcommon.model.valuedomain.ValueDomain;
import com.capgemini.istat.vtlcompiler.vtlcommon.repository.DatasetRepository;
import com.capgemini.istat.vtlcompiler.vtlcommon.repository.UserFunctionRepository;
import com.capgemini.istat.vtlcompiler.vtlcommon.repository.ValueDomainRepository;
import com.capgemini.istat.vtlcompiler.vtlsqlbuilder.service.utility.DbTableUtilityService;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.env.Environment;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

@RunWith(SpringRunner.class)
@SpringBootTest
public class VtlFunctionOperatorsTranslationTest {
    private TranslationUtilsTestService translationUtilTest;

    private DatasetRepository datasetRepository;

    private ValueDomainRepository valueDomainRepository;

    private DbTableUtilityService dbTableUtilityService;

    private UserFunctionRepository userFunctionRepository;

    private Environment environment;


    @Autowired
    public void setTranslationUtilTest(TranslationUtilsTestService translationUtilTest) {
        this.translationUtilTest = translationUtilTest;
    }

    @Autowired
    public void setDatasetRepository(DatasetRepository datasetRepository) {
        this.datasetRepository = datasetRepository;
    }

    @Autowired
    public void setDbTableUtilityService(DbTableUtilityService dbTableUtilityService) {
        this.dbTableUtilityService = dbTableUtilityService;
    }

    @Autowired
    public void setUserFunctionRepository(UserFunctionRepository userFunctionRepository) {
        this.userFunctionRepository = userFunctionRepository;
    }

    @Autowired
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }

    @Autowired
    public void setValueDomainRepository(ValueDomainRepository valueDomainRepository) {
        this.valueDomainRepository = valueDomainRepository;
    }

    @Test
    @Transactional
    public void callSumInt() throws Exception {
        dbTableUtilityService.resetSchema("t");

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("sum_int");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator sum_int (x integer, y integer) " + "returns integer " + "is x + y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (2)+(3) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t0.* INTO DS_r FROM (SELECT (2)+(3) AS int_var) t0;";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (2)+(3) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (2)+(3) AS int_var);";
        }

        String commandStatements = "DS_r := sum_int(2, 3);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallSumInt: " + result);
        System.out.println("Print queryAttesaCallSumInt: " + comandSqlResult);
        assertEquals("Test operator CallSumInt", comandSqlResult, result);
    }

    @Test
    @Transactional
    public void callSumIntDefaultFirst() throws Exception {
        dbTableUtilityService.resetSchema("t");

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("sum_int");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator sum_int (x integer default 0, y integer default 0) " + "returns integer " + "is x + y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (0)+(3) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t0.* INTO DS_r FROM (SELECT (0)+(3) AS int_var) t0;";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (0)+(3) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (0)+(3) AS int_var);";
        }

        String commandStatements = "DS_r := sum_int(_, 3);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallSumIntDefaultFirst: " + result);
        System.out.println("Print queryAttesaCallSumIntDefaultFirst: " + comandSqlResult);
        assertEquals("Test operator CallSumIntDefaultFirst", comandSqlResult, result);
    }

    @Test
    @Transactional
    public void callSumIntDefaultSecond() throws Exception {
        dbTableUtilityService.resetSchema("t");

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("sum_int");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator sum_int (x integer default 0, y integer default 0) " + "returns integer " + "is x + y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (1)+(0) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t0.* INTO DS_r FROM (SELECT (1)+(0) AS int_var) t0;";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (1)+(0) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (1)+(0) AS int_var);";
        }

        String commandStatements = "DS_r := sum_int(1);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallSumIntDefaultSecond: " + result);
        System.out.println("Print queryAttesaCallSumIntDefaultSecond: " + comandSqlResult);
        assertEquals("Test operator CallSumIntDefaultSecond", comandSqlResult, result);
    }

    @Test
    @Transactional
    public void callSumDatasetInt() throws Exception {
        dbTableUtilityService.resetSchema("t");

        VtlDataset vtlDatasetFind = datasetRepository.findByNameIgnoreCase("DS_1");
        if (vtlDatasetFind == null) {
            VtlDataset vtlDataset = new VtlDataset();

            vtlDataset.setPersistent(true);
            vtlDataset.setName("DS_2");
            vtlDataset.setIsOnlyAScalar(false);
            vtlDataset.setTransitory(false);
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ID_1", VtlType.INTEGER, VtlComponentRole.IDENTIFIER));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ID_2", VtlType.STRING, VtlComponentRole.IDENTIFIER));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ME_1", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ME_2", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("AT_1", VtlType.STRING, VtlComponentRole.VIRAL));
            datasetRepository.save(vtlDataset);
        }

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("sum_dataset_int");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator sum_dataset_int (x dataset, y integer default 0) " + "returns dataset " + "is x + y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,(t0.ME_1)+(3) AS ME_1,(t0.ME_2)+(3) AS ME_2 FROM DS_2 t0);CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t1.* INTO DS_r FROM (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,(t0.ME_1)+(3) AS ME_1,(t0.ME_2)+(3) AS ME_2 FROM DS_2 t0) t1;CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,(t0.ME_1)+(3) AS ME_1,(t0.ME_2)+(3) AS ME_2 FROM DS_2 t0);CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,(t0.ME_1)+(3) AS ME_1,(t0.ME_2)+(3) AS ME_2 FROM DS_2 t0);CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        }

        String commandStatements = "DS_r := sum_dataset_int(DS_2, 3);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallSumDatasetInt: " + result);
        System.out.println("Print queryAttesaCallSumDatasetInt: " + comandSqlResult);
        assertEquals("Test operator CallSumDatasetInt", comandSqlResult, result);
    }

    @Test
    @Transactional
    public void callSumDataset() throws Exception {
        dbTableUtilityService.resetSchema("t");

        VtlDataset vtlDatasetFind = datasetRepository.findByNameIgnoreCase("DS_1");
        if (vtlDatasetFind == null) {
            VtlDataset vtlDataset = new VtlDataset();

            vtlDataset.setPersistent(true);
            vtlDataset.setName("DS_58");
            vtlDataset.setIsOnlyAScalar(false);
            vtlDataset.setTransitory(false);
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ID_1", VtlType.INTEGER, VtlComponentRole.IDENTIFIER));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ID_2", VtlType.STRING, VtlComponentRole.IDENTIFIER));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ME_1", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("ME_2", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset.addComponent(translationUtilTest.getVtlComponent("AT_1", VtlType.STRING, VtlComponentRole.VIRAL));
            datasetRepository.save(vtlDataset);

            VtlDataset vtlDataset2 = new VtlDataset();

            vtlDataset2.setPersistent(true);
            vtlDataset2.setName("DS_2");
            vtlDataset2.setIsOnlyAScalar(false);
            vtlDataset2.setTransitory(false);
            vtlDataset2.addComponent(translationUtilTest.getVtlComponent("ID_1", VtlType.INTEGER, VtlComponentRole.IDENTIFIER));
            vtlDataset2.addComponent(translationUtilTest.getVtlComponent("ID_2", VtlType.STRING, VtlComponentRole.IDENTIFIER));
            vtlDataset2.addComponent(translationUtilTest.getVtlComponent("ME_1", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset2.addComponent(translationUtilTest.getVtlComponent("ME_2", VtlType.INTEGER, VtlComponentRole.MEASURE));
            vtlDataset2.addComponent(translationUtilTest.getVtlComponent("AT_1", VtlType.STRING, VtlComponentRole.VIRAL));
            datasetRepository.save(vtlDataset2);
        }

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("sum_dataset");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator sum_dataset (x dataset, y dataset) " + "returns dataset " + "is x + y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,(t2.ME_1)+(t1.ME_1) AS ME_1,(t2.ME_2)+(t1.ME_2) AS ME_2,t2.AT_1 || ':' || t1.AT_1 AS AT_1 FROM DS_58 t2 INNER JOIN DS_2 t1 ON (((t2.ID_1 = t1.ID_1) AND (t2.ID_2 = t1.ID_2))));CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t3.* INTO DS_r FROM (SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,(t2.ME_1)+(t1.ME_1) AS ME_1,(t2.ME_2)+(t1.ME_2) AS ME_2,concat(concat(t2.AT_1,':'),t1.AT_1) AS AT_1 FROM DS_58 t2 INNER JOIN DS_2 t1 ON (((t2.ID_1 = t1.ID_1) AND (t2.ID_2 = t1.ID_2)))) t3;CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,(t2.ME_1)+(t1.ME_1) AS ME_1,(t2.ME_2)+(t1.ME_2) AS ME_2,concat(concat(t2.AT_1,':'),t1.AT_1) AS AT_1 FROM DS_58 t2 INNER JOIN DS_2 t1 ON (((t2.ID_1 = t1.ID_1) AND (t2.ID_2 = t1.ID_2))));CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,(t2.ME_1)+(t1.ME_1) AS ME_1,(t2.ME_2)+(t1.ME_2) AS ME_2,t2.AT_1 || ':' || t1.AT_1 AS AT_1 FROM DS_58 t2 INNER JOIN DS_2 t1 ON (((t2.ID_1 = t1.ID_1) AND (t2.ID_2 = t1.ID_2))));CREATE INDEX DS_r_ID_1_IDX ON DS_r (ID_1);CREATE INDEX DS_r_ID_2_IDX ON DS_r (ID_2);";
        }

        String commandStatements = "DS_r := sum_dataset(DS_58, DS_2);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallSumDataset: " + result);
        System.out.println("Print queryAttesaCallSumDataset: " + comandSqlResult);
        assertEquals("Test operator CallSumDataset", comandSqlResult, result);
    }

    @Test
    @Transactional
    public void callMaxInt() throws Exception {
        dbTableUtilityService.resetSchema("t");

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("max_int");
        userFunction.setFunctionType(VtlUserFunctionType.OPERATOR_FUNCTION);
        userFunction.setFunctionContent("define operator max_int (x integer, y integer) " + "returns integer " + "is if x > y then x else y " + "end operator;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (CASE WHEN ((CASE WHEN (2>3) THEN 'TRUE' ELSE 'FALSE' END) = 'TRUE') THEN 2 ELSE 3 END) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t0.* INTO DS_r FROM (SELECT (CASE WHEN ((CASE WHEN (2>3) THEN 'TRUE' ELSE 'FALSE' END) = 'TRUE') THEN 2 ELSE 3 END) AS int_var) t0;";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (CASE WHEN ((CASE WHEN (2>3) THEN 'TRUE' ELSE 'FALSE' END) = 'TRUE') THEN 2 ELSE 3 END) AS int_var FROM DUAL);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE DS_r AS (SELECT (CASE WHEN ((CASE WHEN (2>3) THEN 'TRUE' ELSE 'FALSE' END) = 'TRUE') THEN 2 ELSE 3 END) AS int_var);";
        }

        String commandStatements = "DS_r := max_int(2, 3);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCallMaxInt: " + result);
        System.out.println("Print queryAttesaCallMaxInt: " + comandSqlResult);
        assertEquals("Test operator CallMaxInt", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkDatapoint() throws Exception {
        dbTableUtilityService.resetSchema("t");
        List<VtlComponent> vtlComponents;
        VtlComponent vtlComponent;

        VtlDataset vtlDataset42 = new VtlDataset();
        vtlDataset42.setPersistent(true);
        vtlDataset42.setName("DS_42");
        vtlDataset42.setIsOnlyAScalar(false);
        vtlDataset42.setTransitory(false);
        vtlComponents = new ArrayList<>();

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("cl_area");
        vtlComponent.setDomainValueParent("cl_area");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("cl_sex");
        vtlComponent.setDomainValueParent("cl_sex");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_1");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_2");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.ATTRIBUTE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.VIRAL);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlDataset42.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDataset42);

        VtlDataset vtlDatasetN = new VtlDataset();
        vtlDatasetN.setPersistent(true);
        vtlDatasetN.setName("DS_59");
        vtlDatasetN.setIsOnlyAScalar(false);
        vtlDatasetN.setTransitory(false);
        vtlComponents = new ArrayList<>();


        vtlDatasetN.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDatasetN);

        ValueDomain valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName(VtlType.NUMBER.getDomainValue());
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("T");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("M");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("cl_area");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("vd_me1");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("vd_me2");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("dpr_op1");
        userFunction.setFunctionType(VtlUserFunctionType.DATAPOINT_FUNCTION);
        userFunction.setFunctionContent("define datapoint ruleset dpr_op1( valuedomain cl_area, cl_sex, num_vd as vd_Me1, num_vd as vd_Me2) is\n" +
                "rule01: when cl_area=\"IT\" and cl_sex=\"M\" then vd_Me1>0 and vd_Me2<100 errorcode \"wrong 01\" errorlevel 1;\n" +
                "rule02: when cl_area=\"ITA\" and cl_sex=\"M\" then vd_Me1<0 errorcode \"wrong 02\";\n" +
                "rule03: when cl_area=\"ITC\" and cl_sex=\"F\" then vd_Me2=-10 errorcode \"wrong 03\"\n" +
                "end datapoint ruleset;");
        userFunctionRepository.save(userFunction);

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,'rule01' AS ruleid,t0.ME_1 AS ME_1,t0.ME_2 AS ME_2,t0.AT_2 AS AT_2,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE '1' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t0 WHERE ((CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,'rule02' AS ruleid,t1.ME_1 AS ME_1,t1.ME_2 AS ME_2,t1.AT_2 AS AT_2,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t1 WHERE ((CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,'rule03' AS ruleid,t2.ME_1 AS ME_1,t2.ME_2 AS ME_2,t2.AT_2 AS AT_2,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t2 WHERE ((CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) IS NOT NULL));";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t3.* INTO dsr FROM (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,'rule01' AS ruleid,t0.ME_1 AS ME_1,t0.ME_2 AS ME_2,t0.AT_2 AS AT_2,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE '1' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t0 WHERE ((CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,'rule02' AS ruleid,t1.ME_1 AS ME_1,t1.ME_2 AS ME_2,t1.AT_2 AS AT_2,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t1 WHERE ((CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,'rule03' AS ruleid,t2.ME_1 AS ME_1,t2.ME_2 AS ME_2,t2.AT_2 AS AT_2,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t2 WHERE ((CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) IS NOT NULL)) t3;";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,'rule01' AS ruleid,t0.ME_1 AS ME_1,t0.ME_2 AS ME_2,t0.AT_2 AS AT_2,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE '1' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t0 WHERE ((CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,'rule02' AS ruleid,t1.ME_1 AS ME_1,t1.ME_2 AS ME_2,t1.AT_2 AS AT_2,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t1 WHERE ((CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,'rule03' AS ruleid,t2.ME_1 AS ME_1,t2.ME_2 AS ME_2,t2.AT_2 AS AT_2,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t2 WHERE ((CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) IS NOT NULL));";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t0.ID_1 AS ID_1,t0.ID_2 AS ID_2,'rule01' AS ruleid,t0.ME_1 AS ME_1,t0.ME_2 AS ME_2,t0.AT_2 AS AT_2,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE '1' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t0 WHERE ((CASE WHEN t0.ID_1='IT' AND t0.ID_2='M' THEN (CASE WHEN t0.ME_1>0 AND t0.ME_2<100 THEN NULL ELSE 'wrong 01' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,'rule02' AS ruleid,t1.ME_1 AS ME_1,t1.ME_2 AS ME_2,t1.AT_2 AS AT_2,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t1 WHERE ((CASE WHEN t1.ID_1='ITA' AND t1.ID_2='M' THEN (CASE WHEN t1.ME_1<0 THEN NULL ELSE 'wrong 02' END) ELSE NULL END) IS NOT NULL) UNION ALL SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,'rule03' AS ruleid,t2.ME_1 AS ME_1,t2.ME_2 AS ME_2,t2.AT_2 AS AT_2,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) AS ERROR_CODE,(CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE '' END) ELSE NULL END) AS ERROR_LEVEL FROM DS_42 t2 WHERE ((CASE WHEN t2.ID_1='ITC' AND t2.ID_2='F' THEN (CASE WHEN t2.ME_2=-10 THEN NULL ELSE 'wrong 03' END) ELSE NULL END) IS NOT NULL));";
        }


        String commandStatements = "dsr:= check_datapoint(ds_42, dpr_op1 components id_1, id_2,me_1, me_2);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckDatapoint: " + result);
        System.out.println("Print queryAttesaCheckDatapoint: " + comandSqlResult);
        assertEquals("Test operator CheckDatapoint", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyAlwaysNullDataset() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = ME_DS[ 'J' , CV()  ]  +ME_DS[ 'K' , CV()  ]  +ME_DS[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_DS[ 'M' , CV()  ]  +(CASE WHEN (ME_DS[ 'N' , CV()  ]  <100) THEN ME_DS[ 'N' , CV()  ]  ELSE NULL END) +ME_DS[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_DS[ 'P' , CV()  ]  +ME_DS[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_DS[ 'R' , CV()  ]  +ME_DS[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_DS[ 'T' , CV()  ]  +ME_DS[ 'U' , CV()  ]  +ME_DS[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_DS[ 'Y' , CV()  ]  >100) THEN ME_DS[ 'Y' , CV()  ]  ELSE NULL END) +ME_DS[ 'W' , CV()  ]  +ME_DS[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_DS[ 'B' , CV()  ]  +ME_DS[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'G' , CV()  ]  )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t14.* INTO dsr FROM (SELECT t13.ID_1 AS ID_1,t13.ID_2 AS ID_2,t13.ME_1 AS ME_1 FROM ( SELECT t4.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t4.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t4.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t6.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t9.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t9 UNION ALL SELECT t10.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t10 UNION ALL SELECT t11.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t11 UNION ALL SELECT t12.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t12.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t12.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t12 )  t13 WHERE (t13.FLAG = 'Y')) t14;CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_null dataset);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysNullDataset: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysNullDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysNullDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyAlwaysNullRule() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_hier_anr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX ds_hier_anr_ID_1_IDX ON ds_hier_anr (ID_1);CREATE INDEX ds_hier_anr_ID_2_IDX ON ds_hier_anr (ID_2);";

        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_hier_anr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_null rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysNullRule: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysNullRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysNullRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyAlwaysNullRulePriority() throws Exception {
        dbTableUtilityService.resetSchema("t");

        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_hier_anrp AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX ds_hier_anrp_ID_1_IDX ON ds_hier_anrp (ID_1);CREATE INDEX ds_hier_anrp_ID_2_IDX ON ds_hier_anrp (ID_2);";

        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_hier_anrp:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_null rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysNullRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysNullRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysNullRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyAlwaysZeroDataset() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr_azd AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = PRESENTV(ME_DS[ 'J' , CV()  ] , ME_DS[ 'J' , CV()  ] , 0) +PRESENTV(ME_DS[ 'K' , CV()  ] , ME_DS[ 'K' , CV()  ] , 0) +PRESENTV(ME_DS[ 'L' , CV()  ] , ME_DS[ 'L' , CV()  ] , 0) ,ME_RULE[ 'B' , ANY  ] = PRESENTV(ME_DS[ 'M' , CV()  ] , ME_DS[ 'M' , CV()  ] , 0) +(CASE WHEN (PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) <100) THEN PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'O' , CV()  ] , ME_DS[ 'O' , CV()  ] , 0) ,ME_RULE[ 'C' ,'2001' ] = PRESENTV(ME_DS[ 'P' , CV()  ] , ME_DS[ 'P' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Q' , CV()  ] , ME_DS[ 'Q' , CV()  ] , 0) ,ME_RULE[ 'D' , ANY  ] = PRESENTV(ME_DS[ 'R' , CV()  ] , ME_DS[ 'R' , CV()  ] , 0) +PRESENTV(ME_DS[ 'S' , CV()  ] , ME_DS[ 'S' , CV()  ] , 0) ,ME_RULE[ 'E' , ANY  ] = PRESENTV(ME_DS[ 'T' , CV()  ] , ME_DS[ 'T' , CV()  ] , 0) +PRESENTV(ME_DS[ 'U' , CV()  ] , ME_DS[ 'U' , CV()  ] , 0) +PRESENTV(ME_DS[ 'V' , CV()  ] , ME_DS[ 'V' , CV()  ] , 0) ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) >100) THEN PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'W' , CV()  ] , ME_DS[ 'W' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Z' , CV()  ] , ME_DS[ 'Z' , CV()  ] , 0) ,ME_RULE[ 'G' , ANY  ] = PRESENTV(ME_DS[ 'B' , CV()  ] , ME_DS[ 'B' , CV()  ] , 0) +PRESENTV(ME_DS[ 'C' , CV()  ] , ME_DS[ 'C' , CV()  ] , 0) ,ME_RULE[ 'H' , ANY  ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'E' , CV()  ] , ME_DS[ 'E' , CV()  ] , 0) ,ME_RULE[ 'I' ,'2001' ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'G' , CV()  ] , ME_DS[ 'G' , CV()  ] , 0) )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX dsr_azd_ID_1_IDX ON dsr_azd (ID_1);CREATE INDEX dsr_azd_ID_2_IDX ON dsr_azd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t14.* INTO dsr_azd FROM (SELECT t13.ID_1 AS ID_1,t13.ID_2 AS ID_2,t13.ME_1 AS ME_1 FROM ( SELECT t4.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t4.ID_1='2000' THEN J+K+L ELSE 0 END) AS ME_1,(CASE WHEN t4.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE 0 END) AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t6.ID_1='2001' THEN P+Q ELSE 0 END) AS ME_1,(CASE WHEN t6.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t9.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE 0 END) ELSE 0 END) AS ME_1,(CASE WHEN t9.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t9 UNION ALL SELECT t10.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t10 UNION ALL SELECT t11.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t11 UNION ALL SELECT t12.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t12.ID_1='2001' THEN D+G ELSE 0 END) AS ME_1,(CASE WHEN t12.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t12 )  t13 WHERE (t13.FLAG = 'Y')) t14;CREATE INDEX dsr_azd_ID_1_IDX ON dsr_azd (ID_1);CREATE INDEX dsr_azd_ID_2_IDX ON dsr_azd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE dsr_azd AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE 0 END) AS ME_1,(CASE WHEN t1.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE 0 END) AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE 0 END) AS ME_1,(CASE WHEN t3.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE 0 END) ELSE 0 END) AS ME_1,(CASE WHEN t6.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE 0 END) AS ME_1,(CASE WHEN t9.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_azd_ID_1_IDX ON dsr_azd (ID_1);CREATE INDEX dsr_azd_ID_2_IDX ON dsr_azd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE dsr_azd AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE 0 END) AS ME_1,(CASE WHEN t1.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE 0 END) AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE 0 END) AS ME_1,(CASE WHEN t3.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE 0 END) ELSE 0 END) AS ME_1,(CASE WHEN t6.ID_1='2000' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,'Y' AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE 0 END) AS ME_1,(CASE WHEN t9.ID_1='2001' THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_azd_ID_1_IDX ON dsr_azd (ID_1);CREATE INDEX dsr_azd_ID_2_IDX ON dsr_azd (ID_2);";
        }

        String commandStatements = "dsr_azd:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_zero dataset );";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysZeroDataset: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysZeroDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysZeroDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyAlwaysZeroRule() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr_azr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE 0 END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE 0 END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX dsr_azr_ID_1_IDX ON dsr_azr (ID_1);CREATE INDEX dsr_azr_ID_2_IDX ON dsr_azr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr_azr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_zero rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysZeroRule: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysZeroRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysZeroRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyAlwaysZeroRulePriority() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  )  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 always_zero rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyAlwaysZeroRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyAlwaysZeroRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyAlwaysZeroRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyNonNullDataset() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr_hier_nnd AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = ME_DS[ 'J' , CV()  ]  +ME_DS[ 'K' , CV()  ]  +ME_DS[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_DS[ 'M' , CV()  ]  +(CASE WHEN (ME_DS[ 'N' , CV()  ]  <100) THEN ME_DS[ 'N' , CV()  ]  ELSE NULL END) +ME_DS[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_DS[ 'P' , CV()  ]  +ME_DS[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_DS[ 'R' , CV()  ]  +ME_DS[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_DS[ 'T' , CV()  ]  +ME_DS[ 'U' , CV()  ]  +ME_DS[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_DS[ 'Y' , CV()  ]  >100) THEN ME_DS[ 'Y' , CV()  ]  ELSE NULL END) +ME_DS[ 'W' , CV()  ]  +ME_DS[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_DS[ 'B' , CV()  ]  +ME_DS[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_DS[ 'J' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'K' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_DS[ 'M' , CV()  ] ) IS NOT NULL AND ((CASE WHEN (ME_DS[ 'N' , CV()  ]  <100) THEN ME_DS[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_DS[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_DS[ 'P' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_DS[ 'R' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_DS[ 'T' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'U' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_DS[ 'Y' , CV()  ]  >100) THEN ME_DS[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_DS[ 'W' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_DS[ 'B' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_DS[ 'D' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_DS[ 'D' , CV()  ] ) IS NOT NULL AND (ME_DS[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_hier_nnd_ID_1_IDX ON dsr_hier_nnd (ID_1);CREATE INDEX dsr_hier_nnd_ID_2_IDX ON dsr_hier_nnd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t14.* INTO dsr_hier_nnd FROM (SELECT t13.ID_1 AS ID_1,t13.ID_2 AS ID_2,t13.ME_1 AS ME_1 FROM ( SELECT t4.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t4.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t4.ID_1='2000'AND ( J IS NOT NULL OR K IS NOT NULL OR L IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M IS NOT NULL OR N IS NOT NULL OR O IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t6.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2001'AND ( P IS NOT NULL OR Q IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R IS NOT NULL OR S IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T IS NOT NULL OR U IS NOT NULL OR V IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t9.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2000'AND ( Y IS NOT NULL OR W IS NOT NULL OR Z IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t9 UNION ALL SELECT t10.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B IS NOT NULL OR C IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t10 UNION ALL SELECT t11.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D IS NOT NULL OR E IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t11 UNION ALL SELECT t12.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t12.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t12.ID_1='2001'AND ( D IS NOT NULL OR G IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t12 )  t13 WHERE (t13.FLAG = 'Y')) t14;CREATE INDEX dsr_hier_nnd_ID_1_IDX ON dsr_hier_nnd (ID_1);CREATE INDEX dsr_hier_nnd_ID_2_IDX ON dsr_hier_nnd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE dsr_hier_nnd AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000'AND ( J IS NOT NULL OR K IS NOT NULL OR L IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M IS NOT NULL OR N IS NOT NULL OR O IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001'AND ( P IS NOT NULL OR Q IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R IS NOT NULL OR S IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T IS NOT NULL OR U IS NOT NULL OR V IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000'AND ( Y IS NOT NULL OR W IS NOT NULL OR Z IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B IS NOT NULL OR C IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D IS NOT NULL OR E IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001'AND ( D IS NOT NULL OR G IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_hier_nnd_ID_1_IDX ON dsr_hier_nnd (ID_1);CREATE INDEX dsr_hier_nnd_ID_2_IDX ON dsr_hier_nnd (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE dsr_hier_nnd AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000'AND ( J IS NOT NULL OR K IS NOT NULL OR L IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M IS NOT NULL OR N IS NOT NULL OR O IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001'AND ( P IS NOT NULL OR Q IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R IS NOT NULL OR S IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T IS NOT NULL OR U IS NOT NULL OR V IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000'AND ( Y IS NOT NULL OR W IS NOT NULL OR Z IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B IS NOT NULL OR C IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D IS NOT NULL OR E IS NOT NULL THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001'AND ( D IS NOT NULL OR G IS NOT NULL ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_hier_nnd_ID_1_IDX ON dsr_hier_nnd (ID_1);CREATE INDEX dsr_hier_nnd_ID_2_IDX ON dsr_hier_nnd (ID_2);";
        }

        String commandStatements = "dsr_hier_nnd:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_null dataset );";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonNullDataset: " + result);
        System.out.println("Print queryAttesaHierarchyNonNullDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonNullDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyNonNullRule() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL AND ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_null rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonNullRule: " + result);
        System.out.println("Print queryAttesaHierarchyNonNullRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonNullRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyNonNullRulePriority() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL AND ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL AND (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL AND (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_null rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonNullRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyNonNullRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonNullRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyNonZeroDataset() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = PRESENTV(ME_DS[ 'J' , CV()  ] , ME_DS[ 'J' , CV()  ] , 0) +PRESENTV(ME_DS[ 'K' , CV()  ] , ME_DS[ 'K' , CV()  ] , 0) +PRESENTV(ME_DS[ 'L' , CV()  ] , ME_DS[ 'L' , CV()  ] , 0) ,ME_RULE[ 'B' , ANY  ] = PRESENTV(ME_DS[ 'M' , CV()  ] , ME_DS[ 'M' , CV()  ] , 0) +(CASE WHEN (PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) <100) THEN PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'O' , CV()  ] , ME_DS[ 'O' , CV()  ] , 0) ,ME_RULE[ 'C' ,'2001' ] = PRESENTV(ME_DS[ 'P' , CV()  ] , ME_DS[ 'P' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Q' , CV()  ] , ME_DS[ 'Q' , CV()  ] , 0) ,ME_RULE[ 'D' , ANY  ] = PRESENTV(ME_DS[ 'R' , CV()  ] , ME_DS[ 'R' , CV()  ] , 0) +PRESENTV(ME_DS[ 'S' , CV()  ] , ME_DS[ 'S' , CV()  ] , 0) ,ME_RULE[ 'E' , ANY  ] = PRESENTV(ME_DS[ 'T' , CV()  ] , ME_DS[ 'T' , CV()  ] , 0) +PRESENTV(ME_DS[ 'U' , CV()  ] , ME_DS[ 'U' , CV()  ] , 0) +PRESENTV(ME_DS[ 'V' , CV()  ] , ME_DS[ 'V' , CV()  ] , 0) ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) >100) THEN PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'W' , CV()  ] , ME_DS[ 'W' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Z' , CV()  ] , ME_DS[ 'Z' , CV()  ] , 0) ,ME_RULE[ 'G' , ANY  ] = PRESENTV(ME_DS[ 'B' , CV()  ] , ME_DS[ 'B' , CV()  ] , 0) +PRESENTV(ME_DS[ 'C' , CV()  ] , ME_DS[ 'C' , CV()  ] , 0) ,ME_RULE[ 'H' , ANY  ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'E' , CV()  ] , ME_DS[ 'E' , CV()  ] , 0) ,ME_RULE[ 'I' ,'2001' ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'G' , CV()  ] , ME_DS[ 'G' , CV()  ] , 0) ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'J' , CV()  ] , ME_DS[ 'J' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'K' , CV()  ] , ME_DS[ 'K' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'L' , CV()  ] , ME_DS[ 'L' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'M' , CV()  ] , ME_DS[ 'M' , CV()  ] , 0)) <> 0 OR ((CASE WHEN (PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) <100) THEN PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) ELSE  0 END)) <> 0 OR (PRESENTV(ME_DS[ 'O' , CV()  ] , ME_DS[ 'O' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'P' , CV()  ] , ME_DS[ 'P' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'Q' , CV()  ] , ME_DS[ 'Q' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'R' , CV()  ] , ME_DS[ 'R' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'S' , CV()  ] , ME_DS[ 'S' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'T' , CV()  ] , ME_DS[ 'T' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'U' , CV()  ] , ME_DS[ 'U' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'V' , CV()  ] , ME_DS[ 'V' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) >100) THEN PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) ELSE  0 END)) <> 0 OR (PRESENTV(ME_DS[ 'W' , CV()  ] , ME_DS[ 'W' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'Z' , CV()  ] , ME_DS[ 'Z' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'B' , CV()  ] , ME_DS[ 'B' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'C' , CV()  ] , ME_DS[ 'C' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'E' , CV()  ] , ME_DS[ 'E' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0)) <> 0 OR (PRESENTV(ME_DS[ 'G' , CV()  ] , ME_DS[ 'G' , CV()  ] , 0)) <> 0)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t14.* INTO dsr FROM (SELECT t13.ID_1 AS ID_1,t13.ID_2 AS ID_2,t13.ME_1 AS ME_1 FROM ( SELECT t4.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t4.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t4.ID_1='2000'AND ( J <> 0 OR K <> 0 OR L <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M <> 0 OR N <> 0 OR O <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t6.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2001'AND ( P <> 0 OR Q <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R <> 0 OR S <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T <> 0 OR U <> 0 OR V <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t9.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2000'AND ( Y <> 0 OR W <> 0 OR Z <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t9 UNION ALL SELECT t10.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B <> 0 OR C <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t10 UNION ALL SELECT t11.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D <> 0 OR E <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t11 UNION ALL SELECT t12.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t12.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t12.ID_1='2001'AND ( D <> 0 OR G <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t3.ID_1 AS ID_1,t3.A AS A,t3.J AS J,t3.K AS K,t3.L AS L,t3.B AS B,t3.M AS M,t3.N AS N,t3.O AS O,t3.C AS C,t3.P AS P,t3.Q AS Q,t3.D AS D,t3.R AS R,t3.S AS S,t3.E AS E,t3.T AS T,t3.U AS U,t3.V AS V,t3.F AS F,t3.Y AS Y,t3.W AS W,t3.Z AS Z,t3.G AS G,t3.H AS H,t3.I AS I FROM  t3 )  t12 )  t13 WHERE (t13.FLAG = 'Y')) t14;CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000'AND ( J <> 0 OR K <> 0 OR L <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M <> 0 OR N <> 0 OR O <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001'AND ( P <> 0 OR Q <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R <> 0 OR S <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T <> 0 OR U <> 0 OR V <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000'AND ( Y <> 0 OR W <> 0 OR Z <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B <> 0 OR C <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D <> 0 OR E <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001'AND ( D <> 0 OR G <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1 FROM ( SELECT t1.ID_1 AS ID_1,'A' AS ID_2,(CASE WHEN t1.ID_1='2000' THEN J+K+L ELSE NULL END) AS ME_1,(CASE WHEN t1.ID_1='2000'AND ( J <> 0 OR K <> 0 OR L <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'B' AS ID_2,(CASE WHEN (N<100) THEN M+N+O ELSE NULL END) AS ME_1,(CASE WHEN M <> 0 OR N <> 0 OR O <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'C' AS ID_2,(CASE WHEN t3.ID_1='2001' THEN P+Q ELSE NULL END) AS ME_1,(CASE WHEN t3.ID_1='2001'AND ( P <> 0 OR Q <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'D' AS ID_2,R+S AS ME_1,(CASE WHEN R <> 0 OR S <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'E' AS ID_2,T+U+V AS ME_1,(CASE WHEN T <> 0 OR U <> 0 OR V <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'F' AS ID_2,(CASE WHEN t6.ID_1='2000' THEN (CASE WHEN (Y>100) THEN Y+W+Z ELSE NULL END) ELSE NULL END) AS ME_1,(CASE WHEN t6.ID_1='2000'AND ( Y <> 0 OR W <> 0 OR Z <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'G' AS ID_2,B+C AS ME_1,(CASE WHEN B <> 0 OR C <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t7 UNION ALL SELECT t8.ID_1 AS ID_1,'H' AS ID_2,D+E AS ME_1,(CASE WHEN D <> 0 OR E <> 0 THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t8 UNION ALL SELECT t9.ID_1 AS ID_1,'I' AS ID_2,(CASE WHEN t9.ID_1='2001' THEN D+G ELSE NULL END) AS ME_1,(CASE WHEN t9.ID_1='2001'AND ( D <> 0 OR G <> 0 ) THEN 'Y' ELSE 'N' END) AS FLAG FROM ( SELECT t0.ID_1 AS ID_1,SUM((CASE WHEN (id_2='A') THEN ME_1 ELSE NULL END)) AS A,SUM((CASE WHEN (id_2='J') THEN ME_1 ELSE NULL END)) AS J,SUM((CASE WHEN (id_2='K') THEN ME_1 ELSE NULL END)) AS K,SUM((CASE WHEN (id_2='L') THEN ME_1 ELSE NULL END)) AS L,SUM((CASE WHEN (id_2='B') THEN ME_1 ELSE NULL END)) AS B,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='N') THEN ME_1 ELSE NULL END)) AS N,SUM((CASE WHEN (id_2='O') THEN ME_1 ELSE NULL END)) AS O,SUM((CASE WHEN (id_2='C') THEN ME_1 ELSE NULL END)) AS C,SUM((CASE WHEN (id_2='P') THEN ME_1 ELSE NULL END)) AS P,SUM((CASE WHEN (id_2='Q') THEN ME_1 ELSE NULL END)) AS Q,SUM((CASE WHEN (id_2='D') THEN ME_1 ELSE NULL END)) AS D,SUM((CASE WHEN (id_2='R') THEN ME_1 ELSE NULL END)) AS R,SUM((CASE WHEN (id_2='S') THEN ME_1 ELSE NULL END)) AS S,SUM((CASE WHEN (id_2='E') THEN ME_1 ELSE NULL END)) AS E,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='U') THEN ME_1 ELSE NULL END)) AS U,SUM((CASE WHEN (id_2='V') THEN ME_1 ELSE NULL END)) AS V,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F,SUM((CASE WHEN (id_2='Y') THEN ME_1 ELSE NULL END)) AS Y,SUM((CASE WHEN (id_2='W') THEN ME_1 ELSE NULL END)) AS W,SUM((CASE WHEN (id_2='Z') THEN ME_1 ELSE NULL END)) AS Z,SUM((CASE WHEN (id_2='G') THEN ME_1 ELSE NULL END)) AS G,SUM((CASE WHEN (id_2='H') THEN ME_1 ELSE NULL END)) AS H,SUM((CASE WHEN (id_2='I') THEN ME_1 ELSE NULL END)) AS I FROM DS_51 t0 GROUP BY t0.ID_1 )  t9 )  t10 WHERE (t10.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_zero dataset );";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonZeroDataset: " + result);
        System.out.println("Print queryAttesaHierarchyNonZeroDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonZeroDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyNonZeroRule() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE 0 END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE 0 END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) <> 0 OR (ME_RULE[ 'K' , CV()  ] ) <> 0 OR (ME_RULE[ 'L' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) <> 0 OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE  0 END)) <> 0 OR (ME_RULE[ 'O' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) <> 0 OR (ME_RULE[ 'Q' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) <> 0 OR (ME_RULE[ 'S' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) <> 0 OR (ME_RULE[ 'U' , CV()  ] ) <> 0 OR (ME_RULE[ 'V' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE  0 END)) <> 0 OR (ME_RULE[ 'W' , CV()  ] ) <> 0 OR (ME_RULE[ 'Z' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) <> 0 OR (ME_RULE[ 'C' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) <> 0 OR (ME_RULE[ 'E' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) <> 0 OR (ME_RULE[ 'G' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_zero rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonZeroRule: " + result);
        System.out.println("Print queryAttesaHierarchyNonZeroRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonZeroRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void hierarchyNonZeroRulePriority() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) <> 0 OR (ME_RULE[ 'K' , CV()  ] ) <> 0 OR (ME_RULE[ 'L' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) <> 0 OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE  0 END)) <> 0 OR (ME_RULE[ 'O' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) <> 0 OR (ME_RULE[ 'Q' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) <> 0 OR (ME_RULE[ 'S' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) <> 0 OR (ME_RULE[ 'U' , CV()  ] ) <> 0 OR (ME_RULE[ 'V' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE  0 END)) <> 0 OR (ME_RULE[ 'W' , CV()  ] ) <> 0 OR (ME_RULE[ 'Z' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) <> 0 OR (ME_RULE[ 'C' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) <> 0 OR (ME_RULE[ 'E' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) <> 0 OR (ME_RULE[ 'G' , CV()  ] ) <> 0)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 non_zero rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyNonZeroRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyNonZeroRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyNonZeroRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialNullDataset() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr_hier_pnd AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = ME_DS[ 'J' , CV()  ]  +ME_DS[ 'K' , CV()  ]  +ME_DS[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_DS[ 'M' , CV()  ]  +(CASE WHEN (ME_DS[ 'N' , CV()  ]  <100) THEN ME_DS[ 'N' , CV()  ]  ELSE NULL END) +ME_DS[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_DS[ 'P' , CV()  ]  +ME_DS[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_DS[ 'R' , CV()  ]  +ME_DS[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_DS[ 'T' , CV()  ]  +ME_DS[ 'U' , CV()  ]  +ME_DS[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_DS[ 'Y' , CV()  ]  >100) THEN ME_DS[ 'Y' , CV()  ]  ELSE NULL END) +ME_DS[ 'W' , CV()  ]  +ME_DS[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_DS[ 'B' , CV()  ]  +ME_DS[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_DS[ 'D' , CV()  ]  +ME_DS[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_DS[ 'J' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'K' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_DS[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_DS[ 'N' , CV()  ]  <100) THEN ME_DS[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_DS[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_DS[ 'P' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_DS[ 'R' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_DS[ 'T' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'U' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_DS[ 'Y' , CV()  ]  >100) THEN ME_DS[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_DS[ 'W' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_DS[ 'B' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_DS[ 'D' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_DS[ 'D' , CV()  ] ) IS NOT NULL OR (ME_DS[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_hier_pnd_ID_1_IDX ON dsr_hier_pnd (ID_1);CREATE INDEX dsr_hier_pnd_ID_2_IDX ON dsr_hier_pnd (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr_hier_pnd:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_null dataset );";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialNullDataset: " + result);
        System.out.println("Print queryAttesaHierarchyPartialNullDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialNullDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialNullRule() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_null rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialNullRule: " + result);
        System.out.println("Print queryAttesaHierarchyPartialNullRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialNullRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialNullRulePriority() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER (ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE NULL END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_null rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialNullRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyPartialNullRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialNullRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartiaZeroDataset() throws Exception {
        setupHierarchyTest();

        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL (ME_RULE[ 'A' ,'2000' ] = PRESENTV(ME_DS[ 'J' , CV()  ] , ME_DS[ 'J' , CV()  ] , 0) +PRESENTV(ME_DS[ 'K' , CV()  ] , ME_DS[ 'K' , CV()  ] , 0) +PRESENTV(ME_DS[ 'L' , CV()  ] , ME_DS[ 'L' , CV()  ] , 0) ,ME_RULE[ 'B' , ANY  ] = PRESENTV(ME_DS[ 'M' , CV()  ] , ME_DS[ 'M' , CV()  ] , 0) +(CASE WHEN (PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) <100) THEN PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'O' , CV()  ] , ME_DS[ 'O' , CV()  ] , 0) ,ME_RULE[ 'C' ,'2001' ] = PRESENTV(ME_DS[ 'P' , CV()  ] , ME_DS[ 'P' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Q' , CV()  ] , ME_DS[ 'Q' , CV()  ] , 0) ,ME_RULE[ 'D' , ANY  ] = PRESENTV(ME_DS[ 'R' , CV()  ] , ME_DS[ 'R' , CV()  ] , 0) +PRESENTV(ME_DS[ 'S' , CV()  ] , ME_DS[ 'S' , CV()  ] , 0) ,ME_RULE[ 'E' , ANY  ] = PRESENTV(ME_DS[ 'T' , CV()  ] , ME_DS[ 'T' , CV()  ] , 0) +PRESENTV(ME_DS[ 'U' , CV()  ] , ME_DS[ 'U' , CV()  ] , 0) +PRESENTV(ME_DS[ 'V' , CV()  ] , ME_DS[ 'V' , CV()  ] , 0) ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) >100) THEN PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) ELSE 0 END) +PRESENTV(ME_DS[ 'W' , CV()  ] , ME_DS[ 'W' , CV()  ] , 0) +PRESENTV(ME_DS[ 'Z' , CV()  ] , ME_DS[ 'Z' , CV()  ] , 0) ,ME_RULE[ 'G' , ANY  ] = PRESENTV(ME_DS[ 'B' , CV()  ] , ME_DS[ 'B' , CV()  ] , 0) +PRESENTV(ME_DS[ 'C' , CV()  ] , ME_DS[ 'C' , CV()  ] , 0) ,ME_RULE[ 'H' , ANY  ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'E' , CV()  ] , ME_DS[ 'E' , CV()  ] , 0) ,ME_RULE[ 'I' ,'2001' ] = PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0) +PRESENTV(ME_DS[ 'G' , CV()  ] , ME_DS[ 'G' , CV()  ] , 0) ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'J' , CV()  ] , ME_DS[ 'J' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'K' , CV()  ] , ME_DS[ 'K' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'L' , CV()  ] , ME_DS[ 'L' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'M' , CV()  ] , ME_DS[ 'M' , CV()  ] , 0)) IS NOT NULL OR ((CASE WHEN (PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) <100) THEN PRESENTV(ME_DS[ 'N' , CV()  ] , ME_DS[ 'N' , CV()  ] , 0) ELSE NULL END)) IS NOT NULL OR (PRESENTV(ME_DS[ 'O' , CV()  ] , ME_DS[ 'O' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'P' , CV()  ] , ME_DS[ 'P' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'Q' , CV()  ] , ME_DS[ 'Q' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'R' , CV()  ] , ME_DS[ 'R' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'S' , CV()  ] , ME_DS[ 'S' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'T' , CV()  ] , ME_DS[ 'T' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'U' , CV()  ] , ME_DS[ 'U' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'V' , CV()  ] , ME_DS[ 'V' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) >100) THEN PRESENTV(ME_DS[ 'Y' , CV()  ] , ME_DS[ 'Y' , CV()  ] , 0) ELSE NULL END)) IS NOT NULL OR (PRESENTV(ME_DS[ 'W' , CV()  ] , ME_DS[ 'W' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'Z' , CV()  ] , ME_DS[ 'Z' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'B' , CV()  ] , ME_DS[ 'B' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'C' , CV()  ] , ME_DS[ 'C' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'E' , CV()  ] , ME_DS[ 'E' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((PRESENTV(ME_DS[ 'D' , CV()  ] , ME_DS[ 'D' , CV()  ] , 0)) IS NOT NULL OR (PRESENTV(ME_DS[ 'G' , CV()  ] , ME_DS[ 'G' , CV()  ] , 0)) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_zero dataset );";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartiaZeroDataset: " + result);
        System.out.println("Print queryAttesaHierarchyPartiaZeroDataset: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartiaZeroDataset", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialZeroRule() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = ME_RULE[ 'J' , CV()  ]  +ME_RULE[ 'K' , CV()  ]  +ME_RULE[ 'L' , CV()  ]  ,ME_RULE[ 'B' , ANY  ] = ME_RULE[ 'M' , CV()  ]  +(CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE 0 END) +ME_RULE[ 'O' , CV()  ]  ,ME_RULE[ 'C' ,'2001' ] = ME_RULE[ 'P' , CV()  ]  +ME_RULE[ 'Q' , CV()  ]  ,ME_RULE[ 'D' , ANY  ] = ME_RULE[ 'R' , CV()  ]  +ME_RULE[ 'S' , CV()  ]  ,ME_RULE[ 'E' , ANY  ] = ME_RULE[ 'T' , CV()  ]  +ME_RULE[ 'U' , CV()  ]  +ME_RULE[ 'V' , CV()  ]  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE 0 END) +ME_RULE[ 'W' , CV()  ]  +ME_RULE[ 'Z' , CV()  ]  ,ME_RULE[ 'G' , ANY  ] = ME_RULE[ 'B' , CV()  ]  +ME_RULE[ 'C' , CV()  ]  ,ME_RULE[ 'H' , ANY  ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'E' , CV()  ]  ,ME_RULE[ 'I' ,'2001' ] = ME_RULE[ 'D' , CV()  ]  +ME_RULE[ 'G' , CV()  ]  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_zero rule);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialZeroRule: " + result);
        System.out.println("Print queryAttesaHierarchyPartialZeroRule: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialZeroRule", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialZeroRulePriority() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_zero rule_priority);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialZeroRulePriority: " + result);
        System.out.println("Print queryAttesaHierarchyPartialZeroRulePriority: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialZeroRulePriority", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void hierarchyPartialZeroRulePriorityAll() throws Exception {
        setupHierarchyTest();
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE dsr_computed AS (SELECT t3.ID_1 AS ID_1,t3.ID_2 AS ID_2,t3.ME_RULE AS ME_1 FROM ( SELECT * FROM DS_51  MODEL RETURN UPDATED ROWS DIMENSION BY (id_2,id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE , 'N' AS FLAG ) RULES UPSERT ALL AUTOMATIC ORDER ( ME_RULE['J', ANY] = PRESENTV(ME_DS['J', CV()], ME_DS['J', CV()],0), ME_RULE['K', ANY] = PRESENTV(ME_DS['K', CV()], ME_DS['K', CV()],0), ME_RULE['L', ANY] = PRESENTV(ME_DS['L', CV()], ME_DS['L', CV()],0), ME_RULE['M', ANY] = PRESENTV(ME_DS['M', CV()], ME_DS['M', CV()],0), ME_RULE['N', ANY] = PRESENTV(ME_DS['N', CV()], ME_DS['N', CV()],0), ME_RULE['O', ANY] = PRESENTV(ME_DS['O', CV()], ME_DS['O', CV()],0), ME_RULE['P', ANY] = PRESENTV(ME_DS['P', CV()], ME_DS['P', CV()],0), ME_RULE['Q', ANY] = PRESENTV(ME_DS['Q', CV()], ME_DS['Q', CV()],0), ME_RULE['R', ANY] = PRESENTV(ME_DS['R', CV()], ME_DS['R', CV()],0), ME_RULE['S', ANY] = PRESENTV(ME_DS['S', CV()], ME_DS['S', CV()],0), ME_RULE['T', ANY] = PRESENTV(ME_DS['T', CV()], ME_DS['T', CV()],0), ME_RULE['U', ANY] = PRESENTV(ME_DS['U', CV()], ME_DS['U', CV()],0), ME_RULE['V', ANY] = PRESENTV(ME_DS['V', CV()], ME_DS['V', CV()],0), ME_RULE['Y', ANY] = PRESENTV(ME_DS['Y', CV()], ME_DS['Y', CV()],0), ME_RULE['W', ANY] = PRESENTV(ME_DS['W', CV()], ME_DS['W', CV()],0), ME_RULE['Z', ANY] = PRESENTV(ME_DS['Z', CV()], ME_DS['Z', CV()],0),ME_RULE[ 'A' ,'2000' ] = (CASE WHEN ME_RULE[ 'J' , CV()  ] IS NULL THEN ME_DS[ 'J' , CV()  ]  ELSE ME_RULE[ 'J' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'K' , CV()  ] IS NULL THEN ME_DS[ 'K' , CV()  ]  ELSE ME_RULE[ 'K' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'L' , CV()  ] IS NULL THEN ME_DS[ 'L' , CV()  ]  ELSE ME_RULE[ 'L' , CV()  ]  END)  ,ME_RULE[ 'B' , ANY  ] = (CASE WHEN ME_RULE[ 'M' , CV()  ] IS NULL THEN ME_DS[ 'M' , CV()  ]  ELSE ME_RULE[ 'M' , CV()  ]  END)  +(CASE WHEN ((CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  <100) THEN (CASE WHEN ME_RULE[ 'N' , CV()  ] IS NULL THEN ME_DS[ 'N' , CV()  ]  ELSE ME_RULE[ 'N' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'O' , CV()  ] IS NULL THEN ME_DS[ 'O' , CV()  ]  ELSE ME_RULE[ 'O' , CV()  ]  END)  ,ME_RULE[ 'C' ,'2001' ] = (CASE WHEN ME_RULE[ 'P' , CV()  ] IS NULL THEN ME_DS[ 'P' , CV()  ]  ELSE ME_RULE[ 'P' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Q' , CV()  ] IS NULL THEN ME_DS[ 'Q' , CV()  ]  ELSE ME_RULE[ 'Q' , CV()  ]  END)  ,ME_RULE[ 'D' , ANY  ] = (CASE WHEN ME_RULE[ 'R' , CV()  ] IS NULL THEN ME_DS[ 'R' , CV()  ]  ELSE ME_RULE[ 'R' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'S' , CV()  ] IS NULL THEN ME_DS[ 'S' , CV()  ]  ELSE ME_RULE[ 'S' , CV()  ]  END)  ,ME_RULE[ 'E' , ANY  ] = (CASE WHEN ME_RULE[ 'T' , CV()  ] IS NULL THEN ME_DS[ 'T' , CV()  ]  ELSE ME_RULE[ 'T' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'U' , CV()  ] IS NULL THEN ME_DS[ 'U' , CV()  ]  ELSE ME_RULE[ 'U' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'V' , CV()  ] IS NULL THEN ME_DS[ 'V' , CV()  ]  ELSE ME_RULE[ 'V' , CV()  ]  END)  ,ME_RULE[ 'F' ,'2000' ] = (CASE WHEN ((CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  >100) THEN (CASE WHEN ME_RULE[ 'Y' , CV()  ] IS NULL THEN ME_DS[ 'Y' , CV()  ]  ELSE ME_RULE[ 'Y' , CV()  ]  END)  ELSE 0 END) +(CASE WHEN ME_RULE[ 'W' , CV()  ] IS NULL THEN ME_DS[ 'W' , CV()  ]  ELSE ME_RULE[ 'W' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'Z' , CV()  ] IS NULL THEN ME_DS[ 'Z' , CV()  ]  ELSE ME_RULE[ 'Z' , CV()  ]  END)  ,ME_RULE[ 'G' , ANY  ] = (CASE WHEN ME_RULE[ 'B' , CV()  ] IS NULL THEN ME_DS[ 'B' , CV()  ]  ELSE ME_RULE[ 'B' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'C' , CV()  ] IS NULL THEN ME_DS[ 'C' , CV()  ]  ELSE ME_RULE[ 'C' , CV()  ]  END)  ,ME_RULE[ 'H' , ANY  ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'E' , CV()  ] IS NULL THEN ME_DS[ 'E' , CV()  ]  ELSE ME_RULE[ 'E' , CV()  ]  END)  ,ME_RULE[ 'I' ,'2001' ] = (CASE WHEN ME_RULE[ 'D' , CV()  ] IS NULL THEN ME_DS[ 'D' , CV()  ]  ELSE ME_RULE[ 'D' , CV()  ]  END)  +(CASE WHEN ME_RULE[ 'G' , CV()  ] IS NULL THEN ME_DS[ 'G' , CV()  ]  ELSE ME_RULE[ 'G' , CV()  ]  END)  ,FLAG[ 'A' ,'2000' ] = (CASE WHEN ((ME_RULE[ 'J' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'K' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'L' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'B' , ANY  ] = (CASE WHEN ((ME_RULE[ 'M' , CV()  ] ) IS NOT NULL OR ((CASE WHEN (ME_RULE[ 'N' , CV()  ]  <100) THEN ME_RULE[ 'N' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'O' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'C' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'P' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Q' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'D' , ANY  ] = (CASE WHEN ((ME_RULE[ 'R' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'S' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'E' , ANY  ] = (CASE WHEN ((ME_RULE[ 'T' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'U' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'V' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'F' ,'2000' ] = (CASE WHEN (((CASE WHEN (ME_RULE[ 'Y' , CV()  ]  >100) THEN ME_RULE[ 'Y' , CV()  ]  ELSE NULL END)) IS NOT NULL OR (ME_RULE[ 'W' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'Z' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'G' , ANY  ] = (CASE WHEN ((ME_RULE[ 'B' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'C' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'H' , ANY  ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'E' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END),FLAG[ 'I' ,'2001' ] = (CASE WHEN ((ME_RULE[ 'D' , CV()  ] ) IS NOT NULL OR (ME_RULE[ 'G' , CV()  ] ) IS NOT NULL)  THEN 'Y' ELSE 'N' END))  )  t3 LEFT OUTER JOIN DS_51 t1 ON (((t3.ID_1 = t1.ID_1) AND (t3.ID_2 = t1.ID_2))) WHERE (t3.FLAG = 'Y'));CREATE INDEX t4_IDX ON dsr_computed (ID_1);CREATE INDEX t5_IDX ON dsr_computed (ID_2);CREATE TABLE dsr AS (SELECT ID_1,ID_2,ME_1 FROM (SELECT ID_1,ID_2,ME_1,DENSE_RANK() OVER (PARTITION BY ID_1,ID_2 ORDER BY PRIORITY) AS DENSE FROM (SELECT t10.ID_1 AS ID_1,t10.ID_2 AS ID_2,t10.ME_1 AS ME_1,1 AS PRIORITY FROM DS_51 t10 LEFT OUTER JOIN dsr_computed t6 ON ((((t10.ID_1 = t6.ID_1) AND (t10.ID_2 = t6.ID_2)))) WHERE ((t6.ID_1 IS NULL)) UNION ALL SELECT t11.ID_1 AS ID_1,t11.ID_2 AS ID_2,t11.ME_1 AS ME_1,2 AS PRIORITY FROM dsr_computed t11) DT) FT WHERE (DENSE = 1));CREATE INDEX dsr_ID_1_IDX ON dsr (ID_1);CREATE INDEX dsr_ID_2_IDX ON dsr (ID_2);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "dsr:= hierarchy(DS_51, hr_libro condition id_1 rule id_2 partial_zero rule_priority all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryHierarchyPartialZeroRulePriorityAll: " + result);
        System.out.println("Print queryAttesaHierarchyPartialZeroRulePriorityAll: " + comandSqlResult);
        assertEquals("Test operator HierarchyPartialZeroRulePriorityAll", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkhierarchyDatasetAlwaysNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_null dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckhierarchyDatasetAlwaysNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkhierarchyDatasetAlwaysNullALL() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t9.* INTO ds_r FROM (SELECT t8.ID_1 AS ID_1,t8.ID_2 AS ID_2,t8.ID_3 AS ID_3,t8.ruleid AS ruleid,t8.bool_var AS bool_var,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t4.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'T' AS ID_2,t5.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t5.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'T' AS ID_2,t6.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'T' AS ID_2,t7.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t7 )  t8) t9;CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_null dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckhierarchyDatasetAlwaysNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkhierarchyDatasetPriorityAlwaysNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_null dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckhierarchyDatasetAlwaysNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckhierarchyDatasetAlwaysNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetAlwaysZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_zero dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetAlwaysZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetAlwaysZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetAlwaysZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetAlwaysZeroALL() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t9.* INTO ds_r FROM (SELECT t8.ID_1 AS ID_1,t8.ID_2 AS ID_2,t8.ID_3 AS ID_3,t8.ruleid AS ruleid,t8.bool_var AS bool_var,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t4.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'T' AS ID_2,t5.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t5.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'T' AS ID_2,t6.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'T' AS ID_2,t7.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t7 )  t8) t9;CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_55 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_zero dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetAlwaysZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetAlwaysZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetAlwaysZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPriorityAlwaysZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5);";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 always_zero dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPriorityAlwaysZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPriorityAlwaysZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPriorityAlwaysZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void checkHierarchyDatasetNonNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_52");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_52 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_52 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ALL = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_52, hr_op1 condition Id_1 rule id_2 non_null dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetNonNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetNonNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetNonNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetNonNullALL() throws Exception {
        setupCheckHierarchy("DS_52");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_52 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_52 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ALL = 'Y'));";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t9.* INTO ds_r FROM (SELECT t8.ID_1 AS ID_1,t8.ID_2 AS ID_2,t8.ID_3 AS ID_3,t8.ruleid AS ruleid,t8.bool_var AS bool_var,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t4.ID_1='IT' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'T' AS ID_2,t5.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t5.ID_1='ITA' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'T' AS ID_2,t6.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'T' AS ID_2,t7.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t7 )  t8) t9;CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T is NOT NULL AND M is NOT NULL AND F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_52 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_52, hr_op1 condition Id_1 rule id_2 non_null dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetNonNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetNonNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetNonNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPriorityNonNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_52");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_52 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ALL,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_52 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ALL = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_52, hr_op1 condition Id_1 rule id_2 non_null dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPriorityNonNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPriorityNonNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPriorityNonNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    @Test
    @Transactional
    public void checkHierarchyDatasetNonZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 non_zero dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetNonZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetNonZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetNonZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetNonZeroALL() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'M', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] <> 0  OR ME_DS[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t9.* INTO ds_r FROM (SELECT t8.ID_1 AS ID_1,t8.ID_2 AS ID_2,t8.ID_3 AS ID_3,t8.ruleid AS ruleid,t8.bool_var AS bool_var,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t4.ID_1='IT' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'T' AS ID_2,t5.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t5.ID_1='ITA' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'T' AS ID_2,t6.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'T' AS ID_2,t7.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t7 )  t8) t9;CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T <> 0  OR M <> 0  OR F <> 0  )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 non_zero dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetNonZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetNonZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetNonZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPriorityNonZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,t2.BOOL_VAR AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] <> 0  OR ME_TO_USE[ CV(), 'M', CV()] <> 0  OR ME_TO_USE[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] <> 0  OR ME_TO_USE[ CV(), 'M', CV()] <> 0  OR ME_TO_USE[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] <> 0  OR ME_TO_USE[ CV(), 'M', CV()] <> 0  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] <> 0  OR ME_TO_USE[ CV(), 'F', CV()] <> 0  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 non_zero dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPriorityNonZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPriorityNonZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPriorityNonZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPartialNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 partial_null dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPartialNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPartialNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPartialNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPartialNullALL() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        } else if (profileActive.equalsIgnoreCase("sqlServer")) {
            comandSqlResult = "SELECT t9.* INTO ds_r FROM (SELECT t8.ID_1 AS ID_1,t8.ID_2 AS ID_2,t8.ID_3 AS ID_3,t8.ruleid AS ruleid,t8.bool_var AS bool_var,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t8.BOOL_VAR = 'FALSE' THEN t8.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t4.ID_1='IT' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t4 UNION ALL SELECT t5.ID_1 AS ID_1,'T' AS ID_2,t5.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t5.ID_1='ITA' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t5 UNION ALL SELECT t6.ID_1 AS ID_1,'T' AS ID_2,t6.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t6 UNION ALL SELECT t7.ID_1 AS ID_1,'T' AS ID_2,t7.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t3.ID_1 AS ID_1,t3.ID_3 AS ID_3,t3.T AS T,t3.M AS M,t3.F AS F FROM  t3 )  t7 )  t8) t9;CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("mySql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        } else if (profileActive.equalsIgnoreCase("postgreSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORCODE ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.ERRORLEVEL ELSE NULL END) AS errorlevel,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.IMBALANCE ELSE NULL END) AS imbalance FROM ( SELECT t1.ID_1 AS ID_1,'T' AS ID_2,t1.ID_3 AS ID_3,'rule01' AS RULEID,(CASE WHEN t1.ID_1='IT' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN T = M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 01' AS ERRORCODE,'1' AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t1 UNION ALL SELECT t2.ID_1 AS ID_1,'T' AS ID_2,t2.ID_3 AS ID_3,'rule02' AS RULEID,(CASE WHEN t2.ID_1='ITA' AND ( T is NOT NULL OR M is NOT NULL OR F is NOT NULL )  THEN (CASE WHEN (M<1000) THEN (CASE WHEN T > M+F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 02' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M+F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t2 UNION ALL SELECT t3.ID_1 AS ID_1,'T' AS ID_2,t3.ID_3 AS ID_3,'rule03' AS RULEID,(CASE WHEN T > M THEN 'TRUE' ELSE 'FALSE' END) AS BOOL_VAR,'wrong 03' AS ERRORCODE,NULL AS ERRORLEVEL,T - (M) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t3 UNION ALL SELECT t4.ID_1 AS ID_1,'T' AS ID_2,t4.ID_3 AS ID_3,'rule04' AS RULEID,(CASE WHEN (F<100000) THEN (CASE WHEN T > F THEN 'TRUE' ELSE 'FALSE' END) ELSE 'TRUE' END) AS BOOL_VAR,'wrong 04' AS ERRORCODE,'2' AS ERRORLEVEL,T - (F) AS IMBALANCE FROM ( SELECT t0.ID_1 AS ID_1,t0.ID_3 AS ID_3,SUM((CASE WHEN (id_2='T') THEN ME_1 ELSE NULL END)) AS T,SUM((CASE WHEN (id_2='M') THEN ME_1 ELSE NULL END)) AS M,SUM((CASE WHEN (id_2='F') THEN ME_1 ELSE NULL END)) AS F FROM DS_54 t0 GROUP BY t0.ID_1,t0.ID_3 )  t4 )  t5);CREATE INDEX ds_r_ID_1_IDX ON ds_r (ID_1);CREATE INDEX ds_r_ID_2_IDX ON ds_r (ID_2);CREATE INDEX ds_r_ID_3_IDX ON ds_r (ID_3);CREATE INDEX ds_r_ruleid_IDX ON ds_r (ruleid);";
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 partial_null dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPartialNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPartialNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPartialNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPriorityPartialNullALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_54");
        dbTableUtilityService.resetSchema("t");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE NULL END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE NULL END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 partial_null dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPriorityPartialNullALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPriorityPartialNullALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPriorityPartialNullALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPartialZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("ds_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM ds_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN ds_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 partial_zero dataset all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPartialZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPartialZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPartialZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPartialZeroALL() throws Exception {
        setupCheckHierarchy("ds_55");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM ds_55 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] = ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'M' , CV()  ] <1000) THEN  ME_DS[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_DS[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ( ME_DS[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ( ME_DS[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_DS[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_DS[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_DS[ CV() ,  'F' , CV()  ] <100000) THEN  ME_DS[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  OR ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_DS[ CV(), 'T', CV()] IS NOT NULL  AND ME_DS[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN ds_55 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        } else {
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_55, hr_op1 condition Id_1 rule id_2 partial_zero dataset all);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPartialZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPartialZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPartialZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }

    @Test
    @Transactional
    public void checkHierarchyDatasetPriorityPartialZeroALL_MEASURE() throws Exception {
        setupCheckHierarchy("DS_54");
        System.out.println("Il profilo attivo è " + environment.getActiveProfiles()[0]);

        String comandSqlResult = "";
        String profileActive = environment.getActiveProfiles()[0];
        if (profileActive.equalsIgnoreCase("oracleSql")) {
            comandSqlResult = "CREATE TABLE ds_r AS (SELECT t5.ID_1 AS ID_1,t5.ID_2 AS ID_2,t5.ID_3 AS ID_3,t5.ruleid AS ruleid,t5.ME_1 AS ME_1,t5.bool_var AS bool_var,t5.AT_2 AS AT_2,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorcode ELSE NULL END) AS errorcode,(CASE WHEN t5.BOOL_VAR = 'FALSE' THEN t5.errorlevel ELSE NULL END) AS errorlevel,t5.imbalance AS imbalance FROM ( SELECT t2.ID_1 AS ID_1,t2.ID_2 AS ID_2,t2.ID_3 AS ID_3,t2.RULEID AS RULEID,t2.ME_DS AS ME_1,t2.ME_RULE AS ME_RULE,(CASE WHEN FLG_ALL = 'N' THEN NULL ELSE BOOL_VAR END) AS BOOL_VAR,t2.IMBALANCE AS IMBALANCE,t2.ERRORCODE AS ERRORCODE,t2.ERRORLEVEL AS ERRORLEVEL,t2.FLG_ONE AS FLG_ONE,t2.FLG_ALL AS FLG_ALL,t4.AT_2 AS AT_2 FROM ( SELECT *  FROM (SELECT * FROM  (SELECT t1.ID_1 AS ID_1,t1.ID_2 AS ID_2,t1.ID_3 AS ID_3,t1.ME_1 AS ME_1 FROM DS_54 t1) ) A CROSS JOIN( SELECT 'rule01' AS RULEID, 'wrong 01' AS ERRORCODE,  '1' AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule02' AS RULEID, 'wrong 02' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule03' AS RULEID, 'wrong 03' AS ERRORCODE,  ' '  AS ERRORLEVEL FROM DUAL  UNION ALL SELECT 'rule04' AS RULEID, 'wrong 04' AS ERRORCODE,  '2' AS ERRORLEVEL FROM DUAL ) B MODEL IGNORE NAV RETURN UPDATED ROWS PARTITION BY (ID_3,ERRORCODE,ERRORLEVEL) DIMENSION BY (RULEID,id_2,Id_1) MEASURES (ME_1 AS ME_DS ,ME_1 AS ME_RULE ,CAST('TRUE' AS VARCHAR2(10)) AS BOOL_VAR ,0 AS IMBALANCE ,'N' AS FLG_ONE,'N' AS FLG_ALL,ME_1 AS ME_TO_USE ) RULES ( ME_RULE[ 'rule01', 'T','IT' ] = ( ME_RULE[ CV() ,  'M' , CV()  ]+ ME_RULE[ CV() ,  'F' , CV()  ]), ME_TO_USE[ 'rule01', 'T','IT' ] = PRESENTNNV( ME_DS[ 'rule01', 'T','IT' ], ME_DS[ 'rule01', 'T','IT' ], ME_RULE[ 'rule01', 'T','IT' ]),BOOL_VAR[  'rule01',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule01', 'T','IT' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] = ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule01',  'T' , ANY ] = NULL , IMBALANCE[ 'rule01', 'T','IT' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule01',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule01',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule01', 'T','IT' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule02',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule02', 'T','ITA' ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule02',  'T' , ANY ] = NULL , IMBALANCE[ 'rule02', 'T','ITA' ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'M' , CV()  ] <1000) THEN  ME_TO_USE[ CV() ,  'M' , CV()  ] ELSE 0 END)+ ME_TO_USE[ CV() ,  'F' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule02',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule02',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule02', 'T','ITA' ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule03',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule03', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ( ME_TO_USE[ CV() ,  'M' , CV()  ]) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule03',  'T' , ANY ] = NULL , IMBALANCE[ 'rule03', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ( ME_TO_USE[ CV() ,  'M' , CV()  ]) ELSE NULL END),FLG_ONE[  'rule03',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule03',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule03', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'M', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),BOOL_VAR[  'rule04',  'T' , ANY ] = 'TRUE' , BOOL_VAR[ 'rule04', 'T', ANY  ] = (CASE WHEN  ME_TO_USE[ CV() , 'T' , CV()  ] > ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) THEN 'TRUE' ELSE 'FALSE' END),IMBALANCE[  'rule04',  'T' , ANY ] = NULL , IMBALANCE[ 'rule04', 'T', ANY  ] = (CASE WHEN  BOOL_VAR[ CV() , 'T' , CV()  ] = 'FALSE' THEN  ME_TO_USE[ CV() , 'T' , CV()  ] - ((CASE WHEN ( ME_TO_USE[ CV() ,  'F' , CV()  ] <100000) THEN  ME_TO_USE[ CV() ,  'F' , CV()  ] ELSE 0 END)) ELSE NULL END),FLG_ONE[  'rule04',  'T' , ANY ] = 'Y' , FLG_ONE[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  OR ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END),FLG_ALL[  'rule04',  'T' , ANY ] = 'Y' , FLG_ALL[ 'rule04', 'T', ANY  ] = (CASE WHEN ME_TO_USE[ CV(), 'T', CV()] IS NOT NULL  AND ME_TO_USE[ CV(), 'F', CV()] IS NOT NULL  THEN 'Y' ELSE 'N' END))  )  t2 INNER JOIN DS_54 t4 ON (((t2.ID_1 = t4.ID_1) AND (t2.ID_2 = t4.ID_2) AND (t2.ID_3 = t4.ID_3))) )  t5 WHERE (t5.FLG_ONE = 'Y'));";
        }  else{
            Assert.assertTrue(true);
            return;
        }

        String commandStatements = "ds_r:= check_hierarchy (ds_54, hr_op1 condition Id_1 rule id_2 partial_zero dataset_priority all_measures);";
        String result = translationUtilTest.translate(commandStatements);
        System.out.println("Print queryCheckHierarchyDatasetPriorityPartialZeroALL_MEASURE: " + result);
        System.out.println("Print queryAttesaCheckHierarchyDatasetPriorityPartialZeroALL_MEASURE: " + comandSqlResult);
        assertEquals("Test operator CheckHierarchyDatasetPriorityPartialZeroALL_MEASURE", translationUtilTest.temporaryValueObfuscation(comandSqlResult), translationUtilTest.temporaryValueObfuscation(result));
    }


    private void setupHierarchyTest() {
        dbTableUtilityService.resetSchema("t");
        List<VtlComponent> vtlComponents;
        VtlComponent vtlComponent;

        VtlDataset vtlDataset42 = new VtlDataset();
        vtlDataset42.setPersistent(true);
        vtlDataset42.setName("DS_50");
        vtlDataset42.setIsOnlyAScalar(false);
        vtlDataset42.setTransitory(false);
        vtlComponents = new ArrayList<>();

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("anno");
        vtlComponent.setDomainValueParent("anno");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("alfabeto");
        vtlComponent.setDomainValueParent("alfabeto");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_3");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValue());
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_1");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);


        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.ATTRIBUTE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.VIRAL);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlDataset42.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDataset42);


        vtlDataset42 = new VtlDataset();
        vtlDataset42.setPersistent(true);
        vtlDataset42.setName("DS_51");
        vtlDataset42.setIsOnlyAScalar(false);
        vtlDataset42.setTransitory(false);
        vtlComponents = new ArrayList<>();

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("anno");
        vtlComponent.setDomainValueParent("anno");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("alfabeto");
        vtlComponent.setDomainValueParent("alfabeto");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_1");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlDataset42.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDataset42);


        vtlDataset42 = new VtlDataset();
        vtlDataset42.setPersistent(true);
        vtlDataset42.setName("DS_49");
        vtlDataset42.setIsOnlyAScalar(false);
        vtlDataset42.setTransitory(false);
        vtlComponents = new ArrayList<>();

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("anno");
        vtlComponent.setDomainValueParent("anno");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("alfabeto");
        vtlComponent.setDomainValueParent("alfabeto");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_1");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);


        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.VIRAL);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);


        vtlDataset42.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDataset42);

        VtlDataset vtlDatasetN = new VtlDataset();
        vtlDatasetN.setPersistent(true);
        vtlDatasetN.setName("DS_N");
        vtlDatasetN.setIsOnlyAScalar(false);
        vtlDatasetN.setTransitory(false);
        vtlComponents = new ArrayList<>();


        vtlDatasetN.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDatasetN);

        ValueDomain valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName(VtlType.NUMBER.getDomainValue());
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("A");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("B");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("C");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("D");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("E");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("G");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("H");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("I");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("L");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("M");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("N");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("O");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("P");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("Q");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("R");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("S");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("T");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("U");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("V");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("Z");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("J");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("K");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("X");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("Y");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);
        valueDomain = new ValueDomain();
        valueDomain.setCode("W");
        valueDomain.setValueDomainName("alfabeto");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("M");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("cl_area");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("vd_me1");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("");
        valueDomain.setValueDomainName("vd_me2");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("hr_libro");
        userFunction.setFunctionType(VtlUserFunctionType.HIERARCHICAL_FUNCTION);
        userFunction.setFunctionContent("define hierarchical ruleset hr_libro ( valuedomain  condition anno rule alfabeto ) is\n" +
                "  when anno=\"2000\" then A = J + K + L\n" +
                " ; B = M + N[value < 100] + O\n" +
                " ;when anno=\"2001\" then C = P + Q\n" +
                " ; D = R + S\n" +
                " ; E = T + U + V\n" +
                " ;when anno=\"2000\" then F = Y[value >100] + W + Z\n" +
                " ; G = B + C\n" +
                " ; H = D + E\n" +
                " ;when anno=\"2001\" then I = D + G\n" +
                " end hierarchical ruleset;");
        userFunctionRepository.save(userFunction);

        userFunction = new UserFunction();
        userFunction.setFunctionName("hr_op2");
        userFunction.setFunctionType(VtlUserFunctionType.HIERARCHICAL_FUNCTION);
        userFunction.setFunctionContent("define hierarchical ruleset hr_op2 ( valuedomain  rule alfabeto ) is\n" +
                "  A = J + K + L\n" +
                " ; B = M + N + O\n" +
                " ; C = P + Q\n" +
                " ; D = R + S\n" +
                " ; E = T + U + V\n" +
                " ; F = Y + W + Z\n" +
                " ; G = B + C\n" +
                " ; H = D + E\n" +
                " ; I = D + G\n" +
                " end hierarchical ruleset;");
        userFunctionRepository.save(userFunction);
    }

    private void setupCheckHierarchy(String datasetName) {
        dbTableUtilityService.resetSchema("t");
        List<VtlComponent> vtlComponents;
        VtlComponent vtlComponent;

        VtlDataset vtlDataset42 = new VtlDataset();
        vtlDataset42.setPersistent(true);
        vtlDataset42.setName(datasetName);
        vtlDataset42.setIsOnlyAScalar(false);
        vtlDataset42.setTransitory(false);
        vtlComponents = new ArrayList<>();

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("cl_area");
        vtlComponent.setDomainValueParent("cl_area");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue("cl_sex");
        vtlComponent.setDomainValueParent("cl_sex");
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ID_3");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValue());
        vtlComponent.setVtlComponentRole(VtlComponentRole.IDENTIFIER);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("ME_1");
        vtlComponent.setType(VtlType.NUMBER);
        vtlComponent.setDomainValue(VtlType.NUMBER.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.NUMBER.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.MEASURE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);


        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_1");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.ATTRIBUTE);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlComponent = new VtlComponent();
        vtlComponent.setName("AT_2");
        vtlComponent.setType(VtlType.STRING);
        vtlComponent.setDomainValue(VtlType.STRING.getDomainValue());
        vtlComponent.setDomainValueParent(VtlType.STRING.getDomainValueParent());
        vtlComponent.setVtlComponentRole(VtlComponentRole.VIRAL);
        vtlComponent.setVtlDataset(vtlDataset42);
        vtlComponents.add(vtlComponent);

        vtlDataset42.addComponentsList(vtlComponents);
        datasetRepository.save(vtlDataset42);


        ValueDomain valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("M");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("cl_sex");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);


        valueDomain = new ValueDomain();
        valueDomain.setCode("F");
        valueDomain.setValueDomainName("cl_area");
        valueDomain.setDescription("");
        valueDomainRepository.save(valueDomain);

        UserFunction userFunction = new UserFunction();
        userFunction.setFunctionName("hr_op1");
        userFunction.setFunctionType(VtlUserFunctionType.HIERARCHICAL_FUNCTION);
        userFunction.setFunctionContent(" define hierarchical ruleset hr_op1 ( valuedomain condition cl_area rule cl_sex) is\n" +
                "        rule01: when cl_area=\"IT\" then T=M+F errorcode \"wrong 01\" errorlevel 1;\n" +
                "        rule02: when cl_area=\"ITA\" then T>M[value <1000]+F  errorcode \"wrong 02\";\n" +
                "        rule03: T>M errorcode \"wrong 03\";\n" +
                "        rule04: T>F[value <100000] errorcode \"wrong 04\" errorlevel 2\n" +
                "        end hierarchical ruleset;");
        userFunctionRepository.save(userFunction);

    }
    
}
