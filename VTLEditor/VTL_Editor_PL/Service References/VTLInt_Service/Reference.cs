//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VTL_Editor_PL.VTLInt_Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VTLInt_Service.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TestDatabaseConnection", ReplyAction="http://tempuri.org/IService/TestDatabaseConnectionResponse")]
        bool TestDatabaseConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TestDatabaseConnection", ReplyAction="http://tempuri.org/IService/TestDatabaseConnectionResponse")]
        System.Threading.Tasks.Task<bool> TestDatabaseConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataStructureComp", ReplyAction="http://tempuri.org/IService/GetDataStructureCompResponse")]
        ArtefactInfo.model.DataStructureComponentInfo[] GetDataStructureComp(string DataStuctureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataStructureComp", ReplyAction="http://tempuri.org/IService/GetDataStructureCompResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.DataStructureComponentInfo[]> GetDataStructureCompAsync(string DataStuctureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomainValues", ReplyAction="http://tempuri.org/IService/GetValueDomainValuesResponse")]
        ArtefactInfo.model.BaseComponentInfo[] GetValueDomainValues(string ValueDomainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomainValues", ReplyAction="http://tempuri.org/IService/GetValueDomainValuesResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.BaseComponentInfo[]> GetValueDomainValuesAsync(string ValueDomainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSets", ReplyAction="http://tempuri.org/IService/GetDataSetsResponse")]
        ArtefactInfo.model.DataSetInfo[] GetDataSets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSets", ReplyAction="http://tempuri.org/IService/GetDataSetsResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.DataSetInfo[]> GetDataSetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSetComp", ReplyAction="http://tempuri.org/IService/GetDataSetCompResponse")]
        ArtefactInfo.model.DataStructureComponentInfo[] GetDataSetComp(string DataSetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataSetComp", ReplyAction="http://tempuri.org/IService/GetDataSetCompResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.DataStructureComponentInfo[]> GetDataSetCompAsync(string DataSetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataStructures", ReplyAction="http://tempuri.org/IService/GetDataStructuresResponse")]
        ArtefactInfo.model.BaseArtefactInfo[] GetDataStructures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataStructures", ReplyAction="http://tempuri.org/IService/GetDataStructuresResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.BaseArtefactInfo[]> GetDataStructuresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomains", ReplyAction="http://tempuri.org/IService/GetValueDomainsResponse")]
        ArtefactInfo.model.ValueDomainInfo[] GetValueDomains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomains", ReplyAction="http://tempuri.org/IService/GetValueDomainsResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.ValueDomainInfo[]> GetValueDomainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomainSubset", ReplyAction="http://tempuri.org/IService/GetValueDomainSubsetResponse")]
        ArtefactInfo.model.ValueDomainSubsetInfo[] GetValueDomainSubset();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomainSubset", ReplyAction="http://tempuri.org/IService/GetValueDomainSubsetResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.ValueDomainSubsetInfo[]> GetValueDomainSubsetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubSetList", ReplyAction="http://tempuri.org/IService/GetSubSetListResponse")]
        ArtefactInfo.model.BaseComponentInfo[] GetSubSetList(string ValueDomainSubsetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSubSetList", ReplyAction="http://tempuri.org/IService/GetSubSetListResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.BaseComponentInfo[]> GetSubSetListAsync(string ValueDomainSubsetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransformation", ReplyAction="http://tempuri.org/IService/GetTransformationResponse")]
        string GetTransformation(string TransformationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransformation", ReplyAction="http://tempuri.org/IService/GetTransformationResponse")]
        System.Threading.Tasks.Task<string> GetTransformationAsync(string TransformationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransformationList", ReplyAction="http://tempuri.org/IService/GetTransformationListResponse")]
        ArtefactInfo.model.BaseArtefactInfo[] GetTransformationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTransformationList", ReplyAction="http://tempuri.org/IService/GetTransformationListResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.BaseArtefactInfo[]> GetTransformationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserDefinedOperatorsList", ReplyAction="http://tempuri.org/IService/GetUserDefinedOperatorsListResponse")]
        ArtefactInfo.model.BaseUserDefinedOperator[] GetUserDefinedOperatorsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserDefinedOperatorsList", ReplyAction="http://tempuri.org/IService/GetUserDefinedOperatorsListResponse")]
        System.Threading.Tasks.Task<ArtefactInfo.model.BaseUserDefinedOperator[]> GetUserDefinedOperatorsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomain_seq_id", ReplyAction="http://tempuri.org/IService/GetValueDomain_seq_idResponse")]
        System.Collections.Generic.KeyValuePair<int, string>[] GetValueDomain_seq_id(string valueDomainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetValueDomain_seq_id", ReplyAction="http://tempuri.org/IService/GetValueDomain_seq_idResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, string>[]> GetValueDomain_seq_idAsync(string valueDomainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransformation", ReplyAction="http://tempuri.org/IService/InsertTransformationResponse")]
        void InsertTransformation(string trasformationID, string agency, string version, string trasformationText, string clearedAndOrderedStatements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertTransformation", ReplyAction="http://tempuri.org/IService/InsertTransformationResponse")]
        System.Threading.Tasks.Task InsertTransformationAsync(string trasformationID, string agency, string version, string trasformationText, string clearedAndOrderedStatements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTransformation", ReplyAction="http://tempuri.org/IService/RemoveTransformationResponse")]
        void RemoveTransformation(string trasName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveTransformation", ReplyAction="http://tempuri.org/IService/RemoveTransformationResponse")]
        System.Threading.Tasks.Task RemoveTransformationAsync(string trasName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUserDefinedOperator", ReplyAction="http://tempuri.org/IService/InsertUserDefinedOperatorResponse")]
        bool InsertUserDefinedOperator(string Operator_ID, string body, int operator_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUserDefinedOperator", ReplyAction="http://tempuri.org/IService/InsertUserDefinedOperatorResponse")]
        System.Threading.Tasks.Task<bool> InsertUserDefinedOperatorAsync(string Operator_ID, string body, int operator_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomain", ReplyAction="http://tempuri.org/IService/InsertValueDomainResponse")]
        string InsertValueDomain(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, ArtefactInfo.model.BaseArtefactInfo[] valueList, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomain", ReplyAction="http://tempuri.org/IService/InsertValueDomainResponse")]
        System.Threading.Tasks.Task<string> InsertValueDomainAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, ArtefactInfo.model.BaseArtefactInfo[] valueList, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainDescribed", ReplyAction="http://tempuri.org/IService/InsertValueDomainDescribedResponse")]
        string InsertValueDomainDescribed(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainDescribed", ReplyAction="http://tempuri.org/IService/InsertValueDomainDescribedResponse")]
        System.Threading.Tasks.Task<string> InsertValueDomainDescribedAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveValueDomain", ReplyAction="http://tempuri.org/IService/RemoveValueDomainResponse")]
        void RemoveValueDomain(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveValueDomain", ReplyAction="http://tempuri.org/IService/RemoveValueDomainResponse")]
        System.Threading.Tasks.Task RemoveValueDomainAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainSubsetDescribed", ReplyAction="http://tempuri.org/IService/InsertValueDomainSubsetDescribedResponse")]
        bool InsertValueDomainSubsetDescribed(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainSubsetDescribed", ReplyAction="http://tempuri.org/IService/InsertValueDomainSubsetDescribedResponse")]
        System.Threading.Tasks.Task<bool> InsertValueDomainSubsetDescribedAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainSubset", ReplyAction="http://tempuri.org/IService/InsertValueDomainSubsetResponse")]
        bool InsertValueDomainSubset(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, int[] valueList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertValueDomainSubset", ReplyAction="http://tempuri.org/IService/InsertValueDomainSubsetResponse")]
        System.Threading.Tasks.Task<bool> InsertValueDomainSubsetAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, int[] valueList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveValueDomainSubset", ReplyAction="http://tempuri.org/IService/RemoveValueDomainSubsetResponse")]
        void RemoveValueDomainSubset(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveValueDomainSubset", ReplyAction="http://tempuri.org/IService/RemoveValueDomainSubsetResponse")]
        System.Threading.Tasks.Task RemoveValueDomainSubsetAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDataStructure", ReplyAction="http://tempuri.org/IService/InsertDataStructureResponse")]
        string InsertDataStructure(string dsd_ID, string dsd_Agency, string dsd_Version, ArtefactInfo.model.LocalizedValue[] dsd_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDataStructure", ReplyAction="http://tempuri.org/IService/InsertDataStructureResponse")]
        System.Threading.Tasks.Task<string> InsertDataStructureAsync(string dsd_ID, string dsd_Agency, string dsd_Version, ArtefactInfo.model.LocalizedValue[] dsd_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDataSet", ReplyAction="http://tempuri.org/IService/InsertDataSetResponse")]
        string InsertDataSet(string ref_dsd_ID, string ref_dsd_Agency, string ref_dsd_Version, string dataset_id, string dataset_agency, string dataset_version, ArtefactInfo.model.LocalizedValue[] dataset_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDataSet", ReplyAction="http://tempuri.org/IService/InsertDataSetResponse")]
        System.Threading.Tasks.Task<string> InsertDataSetAsync(string ref_dsd_ID, string ref_dsd_Agency, string ref_dsd_Version, string dataset_id, string dataset_agency, string dataset_version, ArtefactInfo.model.LocalizedValue[] dataset_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveDataSet", ReplyAction="http://tempuri.org/IService/RemoveDataSetResponse")]
        void RemoveDataSet(string dataset_ID, string dataset_Agency, string dataset_Version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveDataSet", ReplyAction="http://tempuri.org/IService/RemoveDataSetResponse")]
        System.Threading.Tasks.Task RemoveDataSetAsync(string dataset_ID, string dataset_Agency, string dataset_Version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserDefinedOperator", ReplyAction="http://tempuri.org/IService/RemoveUserDefinedOperatorResponse")]
        void RemoveUserDefinedOperator(string operatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserDefinedOperator", ReplyAction="http://tempuri.org/IService/RemoveUserDefinedOperatorResponse")]
        System.Threading.Tasks.Task RemoveUserDefinedOperatorAsync(string operatorName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : VTL_Editor_PL.VTLInt_Service.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<VTL_Editor_PL.VTLInt_Service.IService>, VTL_Editor_PL.VTLInt_Service.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool TestDatabaseConnection() {
            return base.Channel.TestDatabaseConnection();
        }
        
        public System.Threading.Tasks.Task<bool> TestDatabaseConnectionAsync() {
            return base.Channel.TestDatabaseConnectionAsync();
        }
        
        public ArtefactInfo.model.DataStructureComponentInfo[] GetDataStructureComp(string DataStuctureID) {
            return base.Channel.GetDataStructureComp(DataStuctureID);
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.DataStructureComponentInfo[]> GetDataStructureCompAsync(string DataStuctureID) {
            return base.Channel.GetDataStructureCompAsync(DataStuctureID);
        }
        
        public ArtefactInfo.model.BaseComponentInfo[] GetValueDomainValues(string ValueDomainID) {
            return base.Channel.GetValueDomainValues(ValueDomainID);
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.BaseComponentInfo[]> GetValueDomainValuesAsync(string ValueDomainID) {
            return base.Channel.GetValueDomainValuesAsync(ValueDomainID);
        }
        
        public ArtefactInfo.model.DataSetInfo[] GetDataSets() {
            return base.Channel.GetDataSets();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.DataSetInfo[]> GetDataSetsAsync() {
            return base.Channel.GetDataSetsAsync();
        }
        
        public ArtefactInfo.model.DataStructureComponentInfo[] GetDataSetComp(string DataSetID) {
            return base.Channel.GetDataSetComp(DataSetID);
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.DataStructureComponentInfo[]> GetDataSetCompAsync(string DataSetID) {
            return base.Channel.GetDataSetCompAsync(DataSetID);
        }
        
        public ArtefactInfo.model.BaseArtefactInfo[] GetDataStructures() {
            return base.Channel.GetDataStructures();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.BaseArtefactInfo[]> GetDataStructuresAsync() {
            return base.Channel.GetDataStructuresAsync();
        }
        
        public ArtefactInfo.model.ValueDomainInfo[] GetValueDomains() {
            return base.Channel.GetValueDomains();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.ValueDomainInfo[]> GetValueDomainsAsync() {
            return base.Channel.GetValueDomainsAsync();
        }
        
        public ArtefactInfo.model.ValueDomainSubsetInfo[] GetValueDomainSubset() {
            return base.Channel.GetValueDomainSubset();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.ValueDomainSubsetInfo[]> GetValueDomainSubsetAsync() {
            return base.Channel.GetValueDomainSubsetAsync();
        }
        
        public ArtefactInfo.model.BaseComponentInfo[] GetSubSetList(string ValueDomainSubsetID) {
            return base.Channel.GetSubSetList(ValueDomainSubsetID);
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.BaseComponentInfo[]> GetSubSetListAsync(string ValueDomainSubsetID) {
            return base.Channel.GetSubSetListAsync(ValueDomainSubsetID);
        }
        
        public string GetTransformation(string TransformationID) {
            return base.Channel.GetTransformation(TransformationID);
        }
        
        public System.Threading.Tasks.Task<string> GetTransformationAsync(string TransformationID) {
            return base.Channel.GetTransformationAsync(TransformationID);
        }
        
        public ArtefactInfo.model.BaseArtefactInfo[] GetTransformationList() {
            return base.Channel.GetTransformationList();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.BaseArtefactInfo[]> GetTransformationListAsync() {
            return base.Channel.GetTransformationListAsync();
        }
        
        public ArtefactInfo.model.BaseUserDefinedOperator[] GetUserDefinedOperatorsList() {
            return base.Channel.GetUserDefinedOperatorsList();
        }
        
        public System.Threading.Tasks.Task<ArtefactInfo.model.BaseUserDefinedOperator[]> GetUserDefinedOperatorsListAsync() {
            return base.Channel.GetUserDefinedOperatorsListAsync();
        }
        
        public System.Collections.Generic.KeyValuePair<int, string>[] GetValueDomain_seq_id(string valueDomainId) {
            return base.Channel.GetValueDomain_seq_id(valueDomainId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, string>[]> GetValueDomain_seq_idAsync(string valueDomainId) {
            return base.Channel.GetValueDomain_seq_idAsync(valueDomainId);
        }
        
        public void InsertTransformation(string trasformationID, string agency, string version, string trasformationText, string clearedAndOrderedStatements) {
            base.Channel.InsertTransformation(trasformationID, agency, version, trasformationText, clearedAndOrderedStatements);
        }
        
        public System.Threading.Tasks.Task InsertTransformationAsync(string trasformationID, string agency, string version, string trasformationText, string clearedAndOrderedStatements) {
            return base.Channel.InsertTransformationAsync(trasformationID, agency, version, trasformationText, clearedAndOrderedStatements);
        }
        
        public void RemoveTransformation(string trasName) {
            base.Channel.RemoveTransformation(trasName);
        }
        
        public System.Threading.Tasks.Task RemoveTransformationAsync(string trasName) {
            return base.Channel.RemoveTransformationAsync(trasName);
        }
        
        public bool InsertUserDefinedOperator(string Operator_ID, string body, int operator_type) {
            return base.Channel.InsertUserDefinedOperator(Operator_ID, body, operator_type);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserDefinedOperatorAsync(string Operator_ID, string body, int operator_type) {
            return base.Channel.InsertUserDefinedOperatorAsync(Operator_ID, body, operator_type);
        }
        
        public string InsertValueDomain(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, ArtefactInfo.model.BaseArtefactInfo[] valueList, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type) {
            return base.Channel.InsertValueDomain(ValueDomainID, ValueDomainAgency, ValueDomainVersion, names, valueList, check_presence, creationType, data_type);
        }
        
        public System.Threading.Tasks.Task<string> InsertValueDomainAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, ArtefactInfo.model.BaseArtefactInfo[] valueList, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type) {
            return base.Channel.InsertValueDomainAsync(ValueDomainID, ValueDomainAgency, ValueDomainVersion, names, valueList, check_presence, creationType, data_type);
        }
        
        public string InsertValueDomainDescribed(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type) {
            return base.Channel.InsertValueDomainDescribed(ValueDomainID, ValueDomainAgency, ValueDomainVersion, names, valueRestriction, check_presence, creationType, data_type);
        }
        
        public System.Threading.Tasks.Task<string> InsertValueDomainDescribedAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, bool check_presence, int creationType, ArtefactInfo.VTL.VTL_Model.VTL_DATATYPE data_type) {
            return base.Channel.InsertValueDomainDescribedAsync(ValueDomainID, ValueDomainAgency, ValueDomainVersion, names, valueRestriction, check_presence, creationType, data_type);
        }
        
        public void RemoveValueDomain(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion) {
            base.Channel.RemoveValueDomain(ValueDomainID, ValueDomainAgency, ValueDomainVersion);
        }
        
        public System.Threading.Tasks.Task RemoveValueDomainAsync(string ValueDomainID, string ValueDomainAgency, string ValueDomainVersion) {
            return base.Channel.RemoveValueDomainAsync(ValueDomainID, ValueDomainAgency, ValueDomainVersion);
        }
        
        public bool InsertValueDomainSubsetDescribed(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, int creationType) {
            return base.Channel.InsertValueDomainSubsetDescribed(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion, ref_ValueDomainID, ref_ValueDomainAgency, ref_ValueDomainVersion, names, valueRestriction, creationType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertValueDomainSubsetDescribedAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, string valueRestriction, int creationType) {
            return base.Channel.InsertValueDomainSubsetDescribedAsync(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion, ref_ValueDomainID, ref_ValueDomainAgency, ref_ValueDomainVersion, names, valueRestriction, creationType);
        }
        
        public bool InsertValueDomainSubset(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, int[] valueList, int creationType) {
            return base.Channel.InsertValueDomainSubset(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion, ref_ValueDomainID, ref_ValueDomainAgency, ref_ValueDomainVersion, names, valueList, creationType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertValueDomainSubsetAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion, string ref_ValueDomainID, string ref_ValueDomainAgency, string ref_ValueDomainVersion, ArtefactInfo.model.LocalizedValue[] names, int[] valueList, int creationType) {
            return base.Channel.InsertValueDomainSubsetAsync(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion, ref_ValueDomainID, ref_ValueDomainAgency, ref_ValueDomainVersion, names, valueList, creationType);
        }
        
        public void RemoveValueDomainSubset(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion) {
            base.Channel.RemoveValueDomainSubset(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion);
        }
        
        public System.Threading.Tasks.Task RemoveValueDomainSubsetAsync(string ValueDomainSubsetID, string ValueDomainSubsetAgency, string ValueDomainSubsetVersion) {
            return base.Channel.RemoveValueDomainSubsetAsync(ValueDomainSubsetID, ValueDomainSubsetAgency, ValueDomainSubsetVersion);
        }
        
        public string InsertDataStructure(string dsd_ID, string dsd_Agency, string dsd_Version, ArtefactInfo.model.LocalizedValue[] dsd_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType) {
            return base.Channel.InsertDataStructure(dsd_ID, dsd_Agency, dsd_Version, dsd_names, dsd_componentList, creationType);
        }
        
        public System.Threading.Tasks.Task<string> InsertDataStructureAsync(string dsd_ID, string dsd_Agency, string dsd_Version, ArtefactInfo.model.LocalizedValue[] dsd_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType) {
            return base.Channel.InsertDataStructureAsync(dsd_ID, dsd_Agency, dsd_Version, dsd_names, dsd_componentList, creationType);
        }
        
        public string InsertDataSet(string ref_dsd_ID, string ref_dsd_Agency, string ref_dsd_Version, string dataset_id, string dataset_agency, string dataset_version, ArtefactInfo.model.LocalizedValue[] dataset_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType) {
            return base.Channel.InsertDataSet(ref_dsd_ID, ref_dsd_Agency, ref_dsd_Version, dataset_id, dataset_agency, dataset_version, dataset_names, dsd_componentList, creationType);
        }
        
        public System.Threading.Tasks.Task<string> InsertDataSetAsync(string ref_dsd_ID, string ref_dsd_Agency, string ref_dsd_Version, string dataset_id, string dataset_agency, string dataset_version, ArtefactInfo.model.LocalizedValue[] dataset_names, ArtefactInfo.model.BaseComponentInfo[] dsd_componentList, int creationType) {
            return base.Channel.InsertDataSetAsync(ref_dsd_ID, ref_dsd_Agency, ref_dsd_Version, dataset_id, dataset_agency, dataset_version, dataset_names, dsd_componentList, creationType);
        }
        
        public void RemoveDataSet(string dataset_ID, string dataset_Agency, string dataset_Version) {
            base.Channel.RemoveDataSet(dataset_ID, dataset_Agency, dataset_Version);
        }
        
        public System.Threading.Tasks.Task RemoveDataSetAsync(string dataset_ID, string dataset_Agency, string dataset_Version) {
            return base.Channel.RemoveDataSetAsync(dataset_ID, dataset_Agency, dataset_Version);
        }
        
        public void RemoveUserDefinedOperator(string operatorName) {
            base.Channel.RemoveUserDefinedOperator(operatorName);
        }
        
        public System.Threading.Tasks.Task RemoveUserDefinedOperatorAsync(string operatorName) {
            return base.Channel.RemoveUserDefinedOperatorAsync(operatorName);
        }
    }
}
